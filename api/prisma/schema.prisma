// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Language {
  ENGLISH
  INDONESIA
}

enum Currency {
  IDR
  USD
}

enum Category {
  Villa
  Hotel
  Apartment
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name       String
  email      String   @unique
  password   String?
  pictureUrl String?
  currency   Currency @default(IDR)
  language   Language @default(ENGLISH)

  accountProvider AccountProvider

  tenant   Tenant?
  customer Customer?

  wallet Wallet?
}

enum AccountProvider {
  CREDENTIALS
  GOOGLE
}

model VerificationToken {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String
  token     String   @unique
  expires   DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String
  token     String   @unique
  expires   DateTime

  @@unique([email, token])
}

model Tenant {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [id], references: [id], onDelete: Cascade)

  properties Property[]
}

model Customer {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [id], references: [id], onDelete: Cascade)

  bookings Booking[]
  reviews  Review[]

  refCode            String  @unique
  hasRedeemedRefCode Boolean @default(false)
}

model Property {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  address   String
  lat       Float
  lng       Float
  city      String

  description      String             @db.VarChar(1000)
  category         Category
  propertyPictures PropertyPictures[]
  room             Room[]
  reviews          Review[]

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([name, address], name: "uniqueProperty")
}

model Room {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type         String
  description  String @db.VarChar(1000)
  defaultPrice Float
  roomCapacity Int

  bookings     Booking[]
  roomPrice    RoomPrice[]
  roomPictures RoomPictures[]

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([type, propertyId], name: "uniqueRoom")
}

model RoomPrice {
  id        String   @id @default(uuid())
  roomId    String
  price     Float
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model PropertyPictures {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  url String

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model RoomPictures {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  url String

  roomId String
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model Booking {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  startDate DateTime
  endDate   DateTime

  bookingNumber String        @unique
  type          BookingType   @default(RESERVATION)
  paymentType   PaymentType?
  paymentStatus PaymentStatus @default(PENDING)
  pictureUrl    String?
  amountToPay   Float

  token  TransferToken?
  review Review[]

  roomId String
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)

  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([startDate, endDate, roomId, bookingNumber], name: "uniqueBooking")
}

model TransferToken {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  token   String   @unique
  expires DateTime

  booking Booking @relation(fields: [id], references: [id], onDelete: Cascade)
}

enum BookingType {
  RESERVATION //for user
  MAINTENANCE //for tenant
}

enum PaymentType {
  MANUAL //Manual Transfer
  PAYGATE //Payment Gateway
  WALLET //Digital Wallet
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELED
  PROCESSING //khusus manual transfer
  APPROVED //khusus manual transfer
  COMPLETED //setelah check in
}

model Review {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customerId String
  customer   Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)

  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  propertyId String
  property   Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  review String
  star   Int

  @@unique([customerId, bookingId], name: "uniqueReview")
}

model Wallet {
  id        String   @id
  user      User     @relation(fields: [id], references: [id], onDelete: Cascade)
  balance   Float    @default(1000000)
  points    Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  walletHistory WalletHistory[]
}

model WalletHistory {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  walletId String
  wallet   Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  description String
  value       Float
  types       TransactionTypes
  bp          BalanceOrPoints
}

enum TransactionTypes {
  INCOME
  EXPENSE
}

enum BalanceOrPoints {
  BALANCE
  POINTS
  BOTH
}
